{
  "version": 3,
  "sources": ["../lib/base.js", "../lib/ssyr.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major' );\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float32Array} `A`\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction ssyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tvar isrm;\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\tif (\n\t\t( isrm && uplo === 'lower' ) ||\n\t\t( !isrm && uplo === 'upper' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += f32( x[ ix0 ] * tmp );\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += f32( x[ ix0 ] * tmp );\n\t\t\t\tix0 += strideX;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssyr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar max = require( '@stdlib/math-base-special-fast-max' );\nvar isLayout = require( '@stdlib/blas-base-assert-is-layout' );\nvar isMatrixTriangle = require( '@stdlib/blas-base-assert-is-matrix-triangle' );\nvar isColumnMajor = require( '@stdlib/ndarray-base-assert-is-column-major-string' );\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float32Array} `A`\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction ssyr( order, uplo, N, alpha, x, strideX, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( isColumnMajor( order ) ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, N, alpha, x, strideX, ox, A, sa1, sa2, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssyr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isMatrixTriangle = require( '@stdlib/blas-base-assert-is-matrix-triangle' );\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @returns {Float32Array} `A`\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction ssyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideA1 === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideA1 ) );\n\t}\n\tif ( strideA2 === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideA2 ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssyr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar ssyr = require( './ssyr.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssyr, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssyr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas-base-ssyr\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var ssyr = require( '@stdlib/blas-base-ssyr' );\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var ssyr = require( '@stdlib/blas-base-ssyr' );\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr.ndarray( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar ssyr;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tssyr = main;\n} else {\n\tssyr = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssyr;\n\n// exports: { \"ndarray\": \"ssyr.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_base", "__commonJSMin", "exports", "module", "isRowMajor", "f32", "ssyr", "uplo", "N", "alpha", "x", "strideX", "offsetX", "A", "strideA1", "strideA2", "offsetA", "isrm", "tmp", "ix0", "ix1", "sa0", "sa1", "i0", "i1", "oa", "ox", "require_ssyr", "__commonJSMin", "exports", "module", "max", "isLayout", "isMatrixTriangle", "isColumnMajor", "stride2offset", "format", "base", "ssyr", "order", "uplo", "N", "alpha", "x", "strideX", "A", "LDA", "sa1", "sa2", "ox", "require_ndarray", "__commonJSMin", "exports", "module", "isMatrixTriangle", "format", "base", "ssyr", "uplo", "N", "alpha", "x", "strideX", "offsetX", "A", "strideA1", "strideA2", "offsetA", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "ssyr", "ndarray", "join", "tryRequire", "isError", "main", "ssyr", "tmp"]
}
